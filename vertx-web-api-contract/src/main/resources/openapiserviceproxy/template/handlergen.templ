@code{
numericMapping = [
  "byte":"byte",
  "java.lang.Byte":"byte",
  "short":"short",
  "java.lang.Short":"short",
  "int":"int",
  "java.lang.Integer":"int",
  "long":"long",
  "java.lang.Long":"long",
  "float":"float",
  "java.lang.Float":"float",
  "double":"double",
  "java.lang.Double":"double"
]
}
/*\n
* Copyright 2014 Red Hat, Inc.\n
*\n
* Red Hat licenses this file to you under the Apache License, version 2.0\n
* (the "License"); you may not use this file except in compliance with the\n
* License. You may obtain a copy of the License at:\n
*\n
* http://www.apache.org/licenses/LICENSE-2.0\n
*\n
* Unless required by applicable law or agreed to in writing, software\n
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n
* License for the specific language governing permissions and limitations\n
* under the License.\n
*/\n\n
package @{ifacePackageName};\n
\n
import @{ifaceFQCN};\n
import io.vertx.core.Vertx;\n
import io.vertx.core.Handler;\n
import io.vertx.core.AsyncResult;\n
import io.vertx.core.eventbus.EventBus;\n
import io.vertx.core.eventbus.Message;\n
import io.vertx.core.eventbus.MessageConsumer;\n
import io.vertx.core.eventbus.DeliveryOptions;\n
import io.vertx.core.eventbus.ReplyException;\n
import io.vertx.core.json.JsonObject;\n
import io.vertx.core.json.JsonArray;\n
import java.util.Collection;\n
import java.util.ArrayList;\n
import java.util.HashSet;\n
import java.util.List;\n
import java.util.Map;\n
import java.util.Set;\n
import java.util.UUID;\n
import java.util.stream.Collectors;\n
import io.vertx.ext.web.api.RequestContext;\n
import io.vertx.serviceproxy.ProxyHelper;\n
import io.vertx.serviceproxy.ProxyHandler;\n
import io.vertx.serviceproxy.ServiceException;\n
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;\n
@foreach{importedType:importedTypes}
	@if{!importedType.packageName.equals("java.lang")}
		import @{importedType};\n
	@end{}
@end{}
\n
/*\n
  Generated OpenApi Proxy code - DO NOT EDIT\n
  @author Roger the Robot\n
*/\n
@SuppressWarnings({"unchecked", "rawtypes"})\n
public class @{ifaceSimpleName}VertxProxyHandler extends ProxyHandler {\n
\n
  public static final long DEFAULT_CONNECTION_TIMEOUT = 5 * 60; // 5 minutes \n
\n
  private final Vertx vertx;\n
  private final @{ifaceSimpleName} service;\n
  private final long timerID;\n
  private long lastAccessed;\n
  private final long timeoutSeconds;\n
\n
  public @{ifaceSimpleName}VertxProxyHandler(Vertx vertx, @{ifaceSimpleName} service) {\n
    this(vertx, service, DEFAULT_CONNECTION_TIMEOUT);\n
  }\n
\n
  public @{ifaceSimpleName}VertxProxyHandler(Vertx vertx, @{ifaceSimpleName} service, long timeoutInSecond) {\n
    this(vertx, service, true, timeoutInSecond);\n
  }\n
\n
  public @{ifaceSimpleName}VertxProxyHandler(Vertx vertx, @{ifaceSimpleName} service, boolean topLevel, long timeoutSeconds) {\n
    this.vertx = vertx;\n
    this.service = service;\n
    this.timeoutSeconds = timeoutSeconds;\n
    try {\n
      this.vertx.eventBus().registerDefaultCodec(ServiceException.class,\n
          new ServiceExceptionMessageCodec());\n
    } catch (IllegalStateException ex) {}\n
    if (timeoutSeconds != -1 && !topLevel) {\n
      long period = timeoutSeconds * 1000 / 2;\n
      if (period > 10000) {\n
        period = 10000;\n
      }\n
      this.timerID = vertx.setPeriodic(period, this::checkTimedOut);\n
    } else {\n
      this.timerID = -1;\n
    }\n
    accessed();\n
  }\n
\n
  private void checkTimedOut(long id) {\n
    long now = System.nanoTime();\n
    if (now - lastAccessed > timeoutSeconds * 1000000000) {\n
@foreach{method:methods}
	@if{method.proxyClose}
		@if{method.params.empty}
      service.@{method.name}();\n
		@else{}
      service.@{method.name}(done -> {});\n
		@end{}
	@end{}
@end{}
      close();\n
    }\n
  }\n
\n
  @Override\n
  public void close() {\n
    if (timerID != -1) {\n
      vertx.cancelTimer(timerID);\n
    }\n
    super.close();\n
  }\n
\n
  private void accessed() {\n
    this.lastAccessed = System.nanoTime();\n
  }\n
\n
  public void handle(Message<JsonObject> msg) {\n
    try {\n
      JsonObject json = msg.body();\n
      String action = msg.headers().get("action");\n
      if (action == null) {\n
        throw new IllegalStateException("action not specified");\n
      }\n
      accessed();\n
      switch (action) {\n
@foreach{method:methods}
  @if{method.isProxyClose() || method.isProxyIgnore()}
        case "@{method.name}": {\n
          service.@{method.name}(
		@code{hasParams = !method.params.isEmpty()}
		@code{lastParam = hasParams? method.params.get(method.params.size() - 1) : null}
		@code{hasResultHandler=(lastParam != null) && (lastParam.type.kind == CLASS_HANDLER) && (lastParam.type.args[0].kind==CLASS_ASYNC_RESULT)}
		@code{count=0}
		@foreach{param: method.params}
			@if{!hasResultHandler || (count++ != method.params.size() - 1)}
				@if{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
json.getInteger("@{param.name}") == null ? null : (char)(int)(json.getInteger("@{param.name}"))
				@else{param.type.name == 'byte' || param.type.name == 'java.lang.Byte' || param.type.name == 'short' || param.type.name == 'java.lang.Short' || param.type.name == 'int' || param.type.name == 'java.lang.Integer' || param.type.name == 'long' || param.type.name == 'java.lang.Long'}
json.getValue("@{param.name}") == null ? null : (json.getLong("@{param.name}").@{numericMapping[param.type.name]}Value())
				@else{param.type.name == 'float' || param.type.name == 'java.lang.Float' || param.type.name == 'double' || param.type.name == 'java.lang.Double'}
json.getValue("@{param.name}") == null ? null : (json.getDouble("@{param.name}").@{numericMapping[param.type.name]}Value())
				@else{param.type.kind == CLASS_ENUM}
json.getString("@{param.name}") == null ? null : @{param.type.name}.valueOf(json.getString("@{param.name}"))
				@else{param.type.kind == CLASS_LIST || param.type.kind == CLASS_SET}
					@code{collection=param.type.kind == CLASS_LIST ? 'List' : 'Set'}
					@if{param.type.args[0].kind == CLASS_DATA_OBJECT}
json.getJsonArray("@{param.name}").stream().map(o -> new @{param.type.args[0].simpleName}((JsonObject)o)).collect(Collectors.to@{collection}())
					@else{param.type.args[0].name == 'java.lang.Byte' || param.type.args[0].name == 'java.lang.Short' || param.type.args[0].name == 'java.lang.Integer' || param.type.args[0].name == 'java.lang.Long'}
					@code{abc=param.type.args[0].name}
json.getJsonArray("@{param.name}").stream().map(o -> ((Number)o).@{numericMapping[abc]}Value()).collect(Collectors.to@{collection}())
					@else{}
convert@{collection}(json.getJsonArray("@{param.name}").getList())
					@end{}
				@else{param.type.kind == CLASS_MAP}
					@code{abc=param.type.args[1].name}
					@if{abc == 'java.lang.Byte' || abc == 'java.lang.Short' || abc == 'java.lang.Integer' || abc == 'java.lang.Long' || abc == 'java.lang.Float' || abc == 'java.lang.Double'}
json.getJsonObject("@{param.name}").getMap().entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> ((java.lang.Number)entry.getValue()).@{numericMapping[abc]}Value()))
					@else{}
convertMap(json.getJsonObject("@{param.name}").getMap())
					@end{}
				@else{param.type.kind == CLASS_DATA_OBJECT}
json.getJsonObject("@{param.name}") == null ? null : new @{param.type.name}(json.getJsonObject("@{param.name}"))
				@else{}
(@{param.type.name})json.getValue("@{param.name}")
				@end{}
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST && lastParam.type.args[0].args[0].args[0].name=='java.lang.Character'}
createListCharHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST && lastParam.type.args[0].args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
            if (res.failed()) {\n
              if (res.cause() instanceof ServiceException) {\n
                msg.reply(res.cause());\n
              } else {\n
                msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
              }\n
            } else {\n
              msg.reply(new JsonArray(res.result().stream().map(r -> r == null ? null : r.toJson()).collect(Collectors.toList())));\n
            }\n
         }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_LIST}
createListHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET && lastParam.type.args[0].args[0].args[0].name=='java.lang.Character'}
createSetCharHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET && lastParam.type.args[0].args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
            if (res.failed()) {\n
              if (res.cause() instanceof ServiceException) {\n
                msg.reply(res.cause());\n
              } else {\n
                msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
              }\n
            } else {\n
              msg.reply(new JsonArray(res.result().stream().map(r -> r == null ? null : r.toJson()).collect(Collectors.toList())));\n
            }\n
         }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_SET}
createSetHandler(msg)
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_DATA_OBJECT}
res -> {\n
            if (res.failed()) {\n
              if (res.cause() instanceof ServiceException) {\n
                msg.reply(res.cause());\n
              } else {\n
                msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
              }\n
            } else {\n
              msg.reply(res.result() == null ? null : res.result().toJson());\n
            }\n
         }
			@else{hasResultHandler && lastParam.type.args[0].args[0].kind==CLASS_API && lastParam.type.args[0].args[0].proxyGen}
res -> {\n
            if (res.failed()) {\n
                if (res.cause() instanceof ServiceException) {\n
                  msg.reply(res.cause());\n
                } else {\n
                  msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
                }\n
            } else {\n
              String proxyAddress = UUID.randomUUID().toString();\n
              ProxyHelper.registerService(@{lastParam.type.args[0].args[0].simpleName}.class, vertx, res.result(), proxyAddress, false, timeoutSeconds);\n
              msg.reply(null, new DeliveryOptions().addHeader("proxyaddr", proxyAddress));\n
            }\n
          }
			@else{}
createHandler(msg)
			@end{}
		@end{", "});\n
		@if{method.proxyClose}
          close();\n
		@end{}
          break;\n
        }
	@else{!method.staticMethod}
        case "@{method.name}": {\n
          JsonObject contextSerialized = json.getJsonObject("context");\n
          if (contextSerialized == null)\n
            throw new IllegalStateException("Received action " + action + " without RequestContext \"context\"");\n
          RequestContext context = new RequestContext(contextSerialized);\n
          JsonObject params = context.getParams();\n
          service.@{method.name}(
		@code{hasParamsToExtract = !method.paramsToExtract.isEmpty()}
    @foreach{param: method.paramsToExtract}
      @if{param.type.name == 'char' || param.type.name == 'java.lang.Character'}
this.searchIntegerInJson(params, "@{param.name}") == null ? null : (char)(int)(this.searchIntegerInJson(params, "@{param.name}"))
      @else{param.type.name == 'byte' || param.type.name == 'java.lang.Byte' || param.type.name == 'short' || param.type.name == 'java.lang.Short' || param.type.name == 'int' || param.type.name == 'java.lang.Integer' || param.type.name == 'long' || param.type.name == 'java.lang.Long'}
this.searchInJson(params, "@{param.name}") == null ? null : (this.searchLongInJson(params, "@{param.name}").@{numericMapping[param.type.name]}Value())
      @else{param.type.name == 'float' || param.type.name == 'java.lang.Float' || param.type.name == 'double' || param.type.name == 'java.lang.Double'}
this.searchInJson(params, "@{param.name}") == null ? null : (this.searchDoubleInJson(params, "@{param.name}").@{numericMapping[param.type.name]}Value())
      @else{param.type.kind == CLASS_ENUM}
this.searchStringInJson(params, "@{param.name}") == null ? null : @{param.type.name}.valueOf(this.searchStringInJson(params, "@{param.name}"))
      @else{param.type.kind == CLASS_LIST || param.type.kind == CLASS_SET}
        @code{collection=param.type.kind == CLASS_LIST ? 'List' : 'Set'}
        @if{param.type.args[0].kind == CLASS_DATA_OBJECT}
this.searchJsonArrayInJson(params, "@{param.name}").stream().map(o -> new @{param.type.args[0].simpleName}((JsonObject)o)).collect(Collectors.to@{collection}())
        @else{param.type.args[0].name == 'java.lang.Byte' || param.type.args[0].name == 'java.lang.Short' || param.type.args[0].name == 'java.lang.Integer' || param.type.args[0].name == 'java.lang.Long'}
        @code{abc=param.type.args[0].name}
this.searchJsonArrayInJson(params, "@{param.name}").stream().map(o -> ((Number)o).@{numericMapping[abc]}Value()).collect(Collectors.to@{collection}())
        @else{}
convert@{collection}(this.searchJsonArrayInJson(params, "@{param.name}").getList())
        @end{}
      @else{param.type.kind == CLASS_MAP}
        @code{abc=param.type.args[1].name}
        @if{abc == 'java.lang.Byte' || abc == 'java.lang.Short' || abc == 'java.lang.Integer' || abc == 'java.lang.Long' || abc == 'java.lang.Float' || abc == 'java.lang.Double'}
this.searchJsonObjectInJson(params, "@{param.name}").getMap().entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, entry -> ((java.lang.Number)entry.getValue()).@{numericMapping[abc]}Value()))
        @else{}
convertMap(this.searchJsonObjectInJson(params, "@{param.name}").getMap())
        @end{}
      @else{param.type.kind == CLASS_DATA_OBJECT}
this.searchJsonObjectInJson(params, "@{param.name}") == null ? null : new @{param.type.name}(this.searchJsonObjectInJson(params, "@{param.name}"))
      @else{}
(@{param.type.name})this.searchInJson(params, "@{param.name}")
      @end{}
		@end{", "}
		@if{hasParamsToExtract}
		,
		@end{}
context, res -> {\n
            if (res.failed()) {\n
              if (res.cause() instanceof ServiceException) {\n
                msg.reply(res.cause());\n
              } else {\n
                msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
              }\n
            } else {\n
              msg.reply(res.result() == null ? null : res.result().toJson());\n
            }\n
          });\n
          break;\n
        }
	@end{}
\n
@end{}
        default: {\n
          throw new IllegalStateException("Invalid action: " + action);\n
        }\n
      }\n

    } catch (Throwable t) {\n
      msg.reply(new ServiceException(500, t.getMessage()));\n
      throw t;\n
    }\n

  }\n
\n
  private <T> Handler<AsyncResult<T>> createHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        if (res.cause() instanceof ServiceException) {\n
          msg.reply(res.cause());\n
        } else {\n
          msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
        }\n
      } else {\n
        if (res.result() != null  && res.result().getClass().isEnum()) {\n
          msg.reply(((Enum) res.result()).name());\n
        } else {\n
          msg.reply(res.result());\n
        }\n
      }\n
    };\n
  }\n
\n
  private <T> Handler<AsyncResult<List<T>>> createListHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        if (res.cause() instanceof ServiceException) {\n
          msg.reply(res.cause());\n
        } else {\n
          msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
        }\n
      } else {\n
        msg.reply(new JsonArray(res.result()));\n
      }\n
    };\n
  }\n
\n
  private <T> Handler<AsyncResult<Set<T>>> createSetHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        if (res.cause() instanceof ServiceException) {\n
          msg.reply(res.cause());\n
        } else {\n
          msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
        }\n
      } else {\n
        msg.reply(new JsonArray(new ArrayList<>(res.result())));\n
      }\n
    };\n
  }\n
\n
  private Handler<AsyncResult<List<Character>>> createListCharHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        if (res.cause() instanceof ServiceException) {\n
          msg.reply(res.cause());\n
        } else {\n
          msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
        }\n
      } else {\n
        JsonArray arr = new JsonArray();\n
        for (Character chr: res.result()) {\n
          arr.add((int) chr);\n
        }\n
        msg.reply(arr);\n
      }\n
    };\n
  }\n
\n
  private Handler<AsyncResult<Set<Character>>> createSetCharHandler(Message msg) {\n
    return res -> {\n
      if (res.failed()) {\n
        if (res.cause() instanceof ServiceException) {\n
          msg.reply(res.cause());\n
        } else {\n
          msg.reply(new ServiceException(-1, res.cause().getMessage()));\n
        }\n
      } else {\n
        JsonArray arr = new JsonArray();\n
        for (Character chr: res.result()) {\n
          arr.add((int) chr);\n
        }\n
        msg.reply(arr);\n
      }\n
    };\n
  }\n
\n
  private <T> Map<String, T> convertMap(Map map) {\n
    return (Map<String, T>)map;\n
  }\n
\n
  private <T> List<T> convertList(List list) {\n
    return (List<T>)list;\n
  }\n
\n
  private <T> Set<T> convertSet(List list) {\n
    return new HashSet<T>((List<T>)list);\n
  }\n
\n
  private Object searchInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return  obj.getValue("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getValue(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getValue(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getValue(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getValue(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getValue(key);\n
    return null;\n
  }\n
\n
  private Integer searchIntegerInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getInteger("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getInteger(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getInteger(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getInteger(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getInteger(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getInteger(key);\n
    return null;\n
  }\n
\n
  private Long searchLongInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getLong("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getLong(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getLong(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getLong(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getLong(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getLong(key);\n
    return null;\n
  }\n
\n
  private Double searchDoubleInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getDouble("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getDouble(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getDouble(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getDouble(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getDouble(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getDouble(key);\n
    return null;\n
  }\n
\n
  private String searchStringInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getString("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getString(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getString(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getString(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getString(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getString(key);\n
    return null;\n
  }\n
\n
  private JsonArray searchJsonArrayInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getJsonArray("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getJsonArray(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getJsonArray(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getJsonArray(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getJsonArray(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getJsonArray(key);\n
    return null;\n
  }\n
\n
  private JsonObject searchJsonObjectInJson(JsonObject obj, String key) {\n
    if ("body".equals(key)) return obj.getJsonObject("body");\n
    if (obj.getJsonObject("path").containsKey(key)) return  obj.getJsonObject("path").getJsonObject(key);\n
    if (obj.getJsonObject("query").containsKey(key)) return  obj.getJsonObject("query").getJsonObject(key);\n
    if (obj.getJsonObject("header").containsKey(key)) return  obj.getJsonObject("header").getJsonObject(key);\n
    if (obj.getJsonObject("cookie").containsKey(key)) return  obj.getJsonObject("cookie").getJsonObject(key);\n
    if (obj.getJsonObject("form").containsKey(key)) return  obj.getJsonObject("form").getJsonObject(key);\n
    return null;\n
  }\n
\n
}

